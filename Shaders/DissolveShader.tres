[gd_resource type="ShaderMaterial" load_steps=16 format=2]

[ext_resource path="res://Shaders/noisetexture.tres" type="Texture" id=1]

[sub_resource type="VisualShaderNodeScalarOp" id=1]
output_port_for_preview = 0
default_input_values = [ 0, 0.0, 1, 0.05 ]
operator = 1

[sub_resource type="VisualShaderNodeScalarOp" id=2]
output_port_for_preview = 0
default_input_values = [ 0, 1.0, 1, 0.05 ]
operator = 1

[sub_resource type="VisualShaderNodeScalarFunc" id=3]
output_port_for_preview = 0
function = 15

[sub_resource type="VisualShaderNodeVectorOp" id=4]
output_port_for_preview = 0
operator = 2

[sub_resource type="VisualShaderNodeColorConstant" id=5]
constant = Color( 0.0392157, 0.388235, 0.945098, 0.486275 )

[sub_resource type="VisualShaderNodeScalarOp" id=6]
output_port_for_preview = 0
default_input_values = [ 0, 0.0, 1, 0.5 ]
operator = 2

[sub_resource type="VisualShaderNodeInput" id=7]
input_name = "uv"

[sub_resource type="VisualShaderNodeInput" id=8]
input_name = "time"

[sub_resource type="VisualShaderNodeScalarFunc" id=9]
function = 0

[sub_resource type="VisualShaderNodeScalarOp" id=10]
default_input_values = [ 0, 0.0, 1, 15.0 ]
operator = 3

[sub_resource type="VisualShaderNodeTexture" id=11]
output_port_for_preview = 0
texture = ExtResource( 1 )

[sub_resource type="VisualShaderNodeScalarOp" id=12]
output_port_for_preview = 0
default_input_values = [ 0, 0.0, 1, 0.5 ]

[sub_resource type="VisualShaderNodeScalarFunc" id=13]
output_port_for_preview = 0
function = 15

[sub_resource type="VisualShader" id=14]
code = "shader_type canvas_item;
uniform sampler2D tex_frg_7;


void vertex() {
// Вывод:0

}

void fragment() {
// Вход:2
	vec3 n_out2p0;
	n_out2p0 = vec3(UV,0.0);

// Texture:7
	vec3 n_out7p0;
	float n_out7p1;
	vec4 tex_frg_7_read = texture( tex_frg_7 , n_out2p0.xy );
	n_out7p0 = tex_frg_7_read.rgb;
	n_out7p1 = tex_frg_7_read.a;

// Вход:3
	float n_out3p0;
	n_out3p0 = TIME;

// ScalarFunc:4
	float n_out4p0;
	n_out4p0 = sin(n_out3p0);

// ScalarOp:5
	float n_in5p1 = 15.00000;
	float n_out5p0;
	n_out5p0 = n_out4p0 / n_in5p1;

// ScalarOp:8
	float n_out8p0;
	n_out8p0 = dot(n_out7p0,vec3(0.333333,0.333333,0.333333)) + n_out5p0;

// ScalarOp:10
	float n_in10p1 = 0.05000;
	float n_out10p0;
	n_out10p0 = n_out8p0 - n_in10p1;

// ScalarOp:11
	float n_in11p0 = 1.00000;
	float n_out11p0;
	n_out11p0 = n_in11p0 - n_out10p0;

// ScalarFunc:12
	float n_out12p0;
	n_out12p0 = round(n_out11p0);

// Color:14
	vec3 n_out14p0;
	float n_out14p1;
	n_out14p0 = vec3(0.039216,0.388235,0.945098);
	n_out14p1 = 0.486275;

// VectorOp:13
	vec3 n_out13p0;
	n_out13p0 = vec3(n_out12p0) * n_out14p0;

// ScalarFunc:9
	float n_out9p0;
	n_out9p0 = round(n_out8p0);

// ScalarOp:15
	float n_out15p0;
	n_out15p0 = n_out9p0 * dot(n_out13p0,vec3(0.333333,0.333333,0.333333));

// Вывод:0
	COLOR.rgb = n_out13p0;
	COLOR.a = n_out15p0;

}

void light() {
// Вывод:0

}
"
graph_offset = Vector2( -401.275, -183 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 1240, 120 )
nodes/fragment/2/node = SubResource( 7 )
nodes/fragment/2/position = Vector2( -60, 140 )
nodes/fragment/3/node = SubResource( 8 )
nodes/fragment/3/position = Vector2( -420, 380 )
nodes/fragment/4/node = SubResource( 9 )
nodes/fragment/4/position = Vector2( -220, 380 )
nodes/fragment/5/node = SubResource( 10 )
nodes/fragment/5/position = Vector2( -20, 360 )
nodes/fragment/7/node = SubResource( 11 )
nodes/fragment/7/position = Vector2( 120, 20 )
nodes/fragment/8/node = SubResource( 12 )
nodes/fragment/8/position = Vector2( 320, 300 )
nodes/fragment/9/node = SubResource( 13 )
nodes/fragment/9/position = Vector2( 420, 80 )
nodes/fragment/10/node = SubResource( 1 )
nodes/fragment/10/position = Vector2( 360, 540 )
nodes/fragment/11/node = SubResource( 2 )
nodes/fragment/11/position = Vector2( 580, 560 )
nodes/fragment/12/node = SubResource( 3 )
nodes/fragment/12/position = Vector2( 780, 560 )
nodes/fragment/13/node = SubResource( 4 )
nodes/fragment/13/position = Vector2( 1000, 380 )
nodes/fragment/14/node = SubResource( 5 )
nodes/fragment/14/position = Vector2( 820, 420 )
nodes/fragment/15/node = SubResource( 6 )
nodes/fragment/15/position = Vector2( 860, -80 )
nodes/fragment/connections = PoolIntArray( 7, 0, 8, 0, 8, 0, 9, 0, 5, 0, 8, 1, 8, 0, 10, 0, 10, 0, 11, 1, 11, 0, 12, 0, 12, 0, 13, 0, 14, 0, 13, 1, 2, 0, 7, 0, 13, 0, 0, 0, 9, 0, 15, 0, 13, 0, 15, 1, 15, 0, 0, 1, 3, 0, 4, 0, 4, 0, 5, 0 )

[resource]
shader = SubResource( 14 )
